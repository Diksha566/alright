# Python Cheat Sheet: Strings, NumPy, and Dictionaries & Sets

---

## **1. Strings**

### **Key Features of Strings**
- Strings are immutable sequences of characters.
- Support sequence operations like indexing, slicing, and concatenation.
- Commonly used in text processing and formatting.

### **Common String Methods**

| Method                | Description                                                  |
|-----------------------|--------------------------------------------------------------|
| `str.lower()`         | Converts all characters to lowercase.                        |
| `str.upper()`         | Converts all characters to uppercase.                        |
| `str.strip()`         | Removes leading and trailing whitespace.                     |
| `str.replace(old, new)` | Replaces occurrences of `old` with `new`.                 |
| `str.split(delimiter)` | Splits the string into a list by `delimiter`.               |
| `str.join(iterable)`  | Joins elements of an iterable with the string as separator.  |
| `str.find(sub)`       | Returns the index of the first occurrence of `sub`.          |
| `str.count(sub)`      | Counts occurrences of `sub` in the string.                  |

### **String Formatting**
- **f-strings**: `f"Hello {name}!"`
- **`.format()`**: `"{} is {} years old".format(name, age)`
- **Old-style formatting**: `"%s is %d years old" % (name, age)`

---

## **2. NumPy**

### **Key Features of NumPy**
- Provides multi-dimensional arrays (`ndarray`).
- High-performance mathematical operations.
- Essential for data manipulation and scientific computing.

### **Creating Arrays**
| Function                   | Description                                      |
|----------------------------|--------------------------------------------------|
| `np.array()`               | Creates an array from a list.                   |
| `np.zeros(shape)`          | Creates an array filled with zeros.             |
| `np.ones(shape)`           | Creates an array filled with ones.              |
| `np.arange(start, stop, step)` | Creates an array with a range of values.     |
| `np.linspace(start, stop, num)` | Creates evenly spaced values between start and stop. |

### **Array Operations**
| Operation       | Description                                 |
|-----------------|---------------------------------------------|
| `+`, `-`, `*`, `/` | Element-wise addition, subtraction, multiplication, and division. |
| `np.dot(a, b)`  | Dot product of two arrays.                 |
| `a.sum()`       | Sum of all elements in the array.          |
| `a.mean()`      | Mean of the array elements.                |
| `a.reshape()`   | Reshapes the array into a new shape.        |

### **Indexing and Slicing**
- Access elements: `arr[0, 1]`
- Slicing: `arr[:, 1:3]`
- Boolean indexing: `arr[arr > 5]`

---

## **3. Dictionaries & Sets**

### **Dictionaries**
- Unordered collection of key-value pairs.
- Keys must be unique and immutable.

| Operation                  | Description                                      |
|----------------------------|--------------------------------------------------|
| `dict[key]`               | Access value associated with `key`.             |
| `dict[key] = value`       | Add or update a key-value pair.                 |
| `del dict[key]`           | Remove a key-value pair.                        |
| `dict.get(key, default)`  | Get value for `key`, returns `default` if not found. |
| `dict.keys()`             | Returns a view of all keys.                     |
| `dict.values()`           | Returns a view of all values.                   |
| `dict.items()`            | Returns a view of key-value pairs.              |

### **Sets**
- Unordered collection of unique elements.
- Useful for set operations like union and intersection.

| Operation                  | Description                                      |
|----------------------------|--------------------------------------------------|
| `set.add(elem)`            | Adds an element to the set.                     |
| `set.remove(elem)`         | Removes an element from the set.                |
| `set.union(other_set)`     | Returns the union of two sets.                  |
| `set.intersection(other_set)` | Returns the intersection of two sets.       |
| `set.difference(other_set)` | Returns the difference of two sets.            |
| `set.issubset(other_set)`  | Checks if the set is a subset of another set.   |

---

## **Examples**

### **String Example**
```python
sentence = " Hello, Practical Exam!  "
cleaned = sentence.strip().lower()
print(cleaned)  # Output: "hello, practical exam!"
```

### **NumPy Example**
```python
import numpy as np
arr = np.array([[1, 2, 3], [4, 5, 6]])
print(arr.sum(axis=0))  # Output: [5, 7, 9]
```

### **Dictionary Example**
```python
grades = {"Alice": [85, 90, 88], "Bob": [70, 80, 75]}
for name, scores in grades.items():
    avg = sum(scores) / len(scores)
    print(f"{name}: {avg:.2f}")
```

### **Set Example**
```python
set1 = {1, 2, 3}
set2 = {3, 4, 5}
print(set1.union(set2))  # Output: {1, 2, 3, 4, 5}
```


